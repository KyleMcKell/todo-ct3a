import { Todo } from '@prisma/client';
import type { NextPage } from 'next';
import { signIn, signOut, useSession } from 'next-auth/react';
import Head from 'next/head';
import { FormEvent, useState } from 'react';
import { trpc } from '../utils/trpc';

const Home: NextPage = () => {
	const [todoText, setTodoText] = useState('');
	const ctx = trpc.useContext();
	const { data: todos, isLoading } = trpc.useQuery(['todo.getAll'], {
		retry: false,
	});
	const postTodo = trpc.useMutation('todo.create', {
		onMutate: () => {
			ctx.cancelQuery(['todo.getAll']);

			let optimisticUpdate = ctx.getQueryData(['todo.getAll']);
			if (optimisticUpdate) {
				ctx.setQueryData(['todo.getAll'], optimisticUpdate);
			}
		},
		onSettled: () => {
			ctx.invalidateQueries(['todo.getAll']);
		},
	});

	const { data: session, status } = useSession();

	const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
		e.preventDefault();

		postTodo.mutate({
			text: todoText,
		});
	};

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<div className="pt-6 text-2xl text-blue-500 flex justify-center items-center w-full flex-col">
					{status === 'authenticated' && (
						<div>You are signed in as {session.user?.name}</div>
					)}

					{status === 'authenticated' ? (
						<button onClick={() => signOut()}>Sign Out</button>
					) : (
						<button onClick={() => signIn()}>Sign In</button>
					)}

					<form className="flex gap-8" onSubmit={handleSubmit}>
						<label>Enter a todo</label>
						<input
							className="bg-slate-100 text-slate-900"
							type="text"
							value={todoText}
							onChange={(e) => setTodoText(e.target.value)}
							maxLength={200}
						/>
					</form>

					{isLoading && <div>Getting Todos</div>}

					{todos?.map((todo, i) => {
						return <Todo todo={todo} key={i} />;
					})}
				</div>
			</main>
		</>
	);
};

type TodoProps = {
	todo: Todo;
};

const Todo = ({ todo }: TodoProps) => {
	const ctx = trpc.useContext();
	const toggleTodo = trpc.useMutation('todo.toggleTodo', {
		onMutate: () => {
			ctx.cancelQuery(['todo.getAll']);

			let optimisticUpdate = ctx.getQueryData(['todo.getAll']);
			if (optimisticUpdate) {
				ctx.setQueryData(['todo.getAll'], optimisticUpdate);
			}
		},
		onSettled: () => {
			ctx.invalidateQueries(['todo.getAll']);
		},
	});

	const toggleCompletion = async () => {
		toggleTodo.mutate({ id: todo.id });
	};

	const { completed, name } = todo;

	const completedClasses = completed ? 'line-through' : '';

	return (
		<p className={completedClasses} onClick={toggleCompletion}>
			{name}
		</p>
	);
};

export default Home;
